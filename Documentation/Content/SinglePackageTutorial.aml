<?xml version="1.0" encoding="utf-8"?>
<topic id="c6bdbf74-e281-4153-ae02-9c14cfb53bb0" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        In most common deployment scenarios it is desirable to distribute an installation package as a single, self-extracting
        executable. dotNetInstaller supports embedding dependencies and producing a stand-alone packaged setup.exe. This is
        accomplished by CAB-ing all dependencies into a series of CAB files, embedding them into your setup.exe and extracting
        CAB contents at runtime. dotNetInstaller is also capable of deleting extracted temporary files upon completion. No third-party
        packaging/zipping technology is required.
      </para>
    </introduction>
    <procedure>
      <title>Embedding Dependencies</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              In order to embed dependencies you must add explicit <literal>EmbedFile</literal> or <literal>EmbedFolder</literal>
              components to the bootstrapper configuration. No other automatic embedding, such as from <literal>msi</literal>,
              <literal>openfile</literal> or <literal>download</literal> subcomponents is done by the linker.
            </para>
            <para>
              Right click on a component and choose <ui>Add</ui>, <ui>Embed File</ui> or <ui>Embed Folder</ui>. Select
              the newly created embed node and adjust its properties.
            </para>
            <para>
              The <literal>sourcefilepath</literal> of a <literal>EmbedFile</literal> subcomponent is the location of the file on
              your file system. The <literal>targetfilepath</literal> is a relative destination path, including the filename, under 
              <localUri>#CABPATH</localUri> of the extracted file during installation. You may omit <literal>targetfilepath</literal>
              to extract files under <localUri>#CABPATH</localUri>. The <literal>sourcefilepath</literal> may be a relative location
              to the value of <system>/AppPath</system> specified on the command line of the installer linker, which in turn
              defaults to the current directory from which the linker command is invoked.
            </para>
            <para>
              The <literal>sourcefolderpath</literal> of a <literal>EmbedFolder</literal> subcomponent is the location of the folder on
              your file system. The <literal>targetfolderpath</literal> is a relative destination path under
              <localUri>#CABPATH</localUri> of the extracted folder during installation. You may omit <literal>targetfolderpath</literal>
              to extract folders under <localUri>#CABPATH</localUri>. You may specify additional wildcard options
              using special * and ? characters in <literal>sourcefolderpath</literal>. The latter can also be a relative location
              to the value of <system>/AppPath</system> specified on the command line of the installer linker, which in turn
              defaults to the current directory from which the linker command is invoked.
            </para>
            <alert class="note">
              <para>
                You may use <localUri>#TEMPPATH</localUri> everywhere instead of <localUri>#CABPATH</localUri>. 
                <localUri>#CABPATH</localUri> defaults to <localUri>#TEMPPATH\#GUID</localUri>. If you would like
                temporary files to be deleted after setup completes, use <localUri>#CABPATH</localUri> instead of 
                <localUri>#TEMPPATH</localUri> and set the <literal>cab_path_autodelete</literal> configuration option.
              </para>
            </alert>
            <alert class="note">
              <para>
                When enabling logging, make sure not to output the log file into #CABPATH. This would prevent the #CABPATH directory from
                being deleted since the installer still attempts to write to the log file.
              </para>
            </alert>
          </content>
        </step>
        <step>
          <content>
            <para>
              You may optionally embed individual files via the <application>InstallLinker.exe</application> command line with 
              <system>/EmbedFile</system> and entire folders with their subfolders with <system>/EmbedFolder</system>. The latter also 
              lets you specify a flag, eg. <system>/EmbedFolder:Path\*.msi</system> to embed all .msi files in all 
              subfolders. Note that with <system>/EmbedFolder</system> files are extracted mirroring the structure under the folder 
              specified. For example, if <system>/EmbedFolder:c:\files</system> embeds <localUri>c:\files\folder1\setup.msi</localUri>,
              the extracted setup.msi appears under <localUri>folder1\setup.msi</localUri>. In order to define a different extraction
              structure, use the built-in <literal>EmbedFolder</literal> sub-component.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Link your setup with <system>InstallLinker.exe</system> and test which files have been embedded. Run your 
              <command>Setup.exe <system>/DisplayCab</system></command> to display the CAB contents. You may also run
              <command>Setup.exe <system>/ExtractCab</system></command> to output all CAB contents in the current folder under
              a directory called <localUri>SupportFiles</localUri>.
            </para>
          </content>
        </step>
      </steps>
    </procedure>
  </developerHowToDocument>
</topic>