<?xml version="1.0" encoding="utf-8"?>
<topic id="4d997108-25a8-4158-8072-c47bf49324bb" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        The following section describes variables that are available in all strings, commands and path settings.
        These variables are not supported in boolean or enumeration options.
      </para>
    </introduction>
    <section address="pathvariables">
      <title>Path Variables</title>
      <content>
        <para>
          <definitionTable>
            <definedTerm>#SYSTEMPATH</definedTerm>
            <definition>
              This string is replaced with the windows system directory (using <literal>GetSystemDirectory()</literal> API,
              usually <localUri>C:\WINDOWS\System32</localUri>).
            </definition>
            <definedTerm>#WINDOWSPATH</definedTerm>
            <definition>
              This string is replaced with the windows directory (using <literal>GetWindowsDirectory()</literal> API, usually
              <localUri>C:\WINDOWS</localUri>).
            </definition>
            <definedTerm>#SYSTEMWINDOWSPATH</definedTerm>
            <definition>
              This string is replaced with the system windows directory (using <literal>GetSystemWindowsDirectory()</literal> API, usually
              <localUri>C:\WINDOWS</localUri>).
              On a system that is running Terminal Services, each user has a unique Windows directory. The system Windows
              directory is shared by all users, so it is the directory where an application should store initialization and help
              files that apply to all users. With Terminal Services, this variable is the path
              of the system Windows directory, while the <literal>#WINDOWSPATH</literal> function is the path of a
              Windows directory that is private for each user. On a single-user system, these values are the same.
            </definition>
            <definedTerm>#APPPATH</definedTerm>
            <definition>
              The folder from which the setup bootstrapper is executed. All other paths are relative to the system's current directory.
            </definition>
            <definedTerm>#TEMPPATH</definedTerm>
            <definition>
              This string is replaced with the temp directory (using <literal>GetTempPath()</literal> API, usually
              <localUri>C:\Documents and Settings\[User]\Local Settings\Temp</localUri>).
            </definition>
            <definedTerm>#GUID</definedTerm>
            <definition>A uniquely generated GUID string for each install instance.</definition>
            <definedTerm>#CABPATH</definedTerm>
            <definition>
              The location where the embedded CAB is extracted, if any. This value defaults to #TEMPPATH\#GUID. This location is
              auto-deleted when the appropriate options are chosen in the setup configuration on setup completion, regardless of success
              or failure. Store temporary files in #CABPATH if you want them to be auto-deleted (eg. CAB files) or #TEMPPATH (eg. logs)
              otherwise.
            </definition>
            <definedTerm>#PID</definedTerm>
            <definition>
              Current process ID. Provides a shorter alternative to #GUID for file locations.
            </definition>
            <definedTerm>#UILEVEL</definedTerm>
            <definition>
              Current installer UI level, one of "full", "silent" or "basic".
            </definition>
            <definedTerm>#LANGID</definedTerm>
            <definition>
              Current configuration language ID. This may be user-selected in a language selector and will default to the 
              operating system language ID if the configuration doesn't specify a value.
            </definition>
            <definedTerm>#OSLANGID</definedTerm>
            <definition>
              Operating system language ID. See
              <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="1aa2140c-f65d-4aac-83a4-b86a3a554525" />
              for more information about various options for how this value is obtained.              
            </definition>
            <definedTerm>#LANGUAGE</definedTerm>
            <definition>
              Current configuration language string. This may be blank if the configuration doesn't specify a language defined.
            </definition>
            <definedTerm>#STARTPATH</definedTerm>
            <definition>
              Directory from which the bootstrapper was launched.
            </definition>
            <definedTerm>#STARTEXE</definedTerm>
            <definition>
              Full path, including the file name, of the launched bootstrapper.
            </definition>
            <definedTerm>#STARTFILENAME</definedTerm>
            <definition>
              File name, without path, of the launched bootstrapper.
            </definition>
          </definitionTable>
        </para>
      </content>
    </section>
    <section address="environmentvariables">
      <title>Environment Variables</title>
      <content>
        <para>
          You can substititute environment variables with the <literal>%VARIABLE%</literal> syntax, eg. <literal>%TEMP%</literal>.
          It is not recommended to rely on environment variables for system locations, use path variables instead.
        </para>
      </content>
    </section>
    <section address="registryvalues">
      <title>Registry Values</title>
      <content>
        <para>
          You can substitute registry values with the <literal>@[key(:options)\path(\value)(|key ...)(,default)]</literal> syntax.
          For example <literal>@[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\CommonFilesDir,DefaultValue]</literal>.
          The key doesn't have to exist and you don't have to specify a default value, which is assumed blank. Multiple key paths
          may be separated by <literal>|</literal>, the first value found will be used. The default value will be used if no value
          could be retrieved from registry. The key value within the registry path is optional, make sure to terminate a path without
          a value with a backslash.
        </para>
        <para>
          Registry variable substitution supports both 32-bit and 64-bit registry views. dotNetInstaller is a 32-bit application
          and by default accesses the 32-bit registry view on a 64-bit operating system. To access the 64-bit registry view, set
          options to <literal>WOW64_64</literal>. For example <literal>@[HKEY_LOCAL_MACHINE:WOW64_64\SOFTWARE\64BitApplication\Name,DefaultValue]</literal>.
          For more information see <externalLink>
            <linkUri>http://msdn.microsoft.com/en-us/library/aa384129(VS.85).aspx</linkUri>
            <linkText>Accessing an Alternate Registry View</linkText>
          </externalLink>.
        </para>
      </content>
    </section>
    <section address="usercontrolvariables">
      <title>User Control Variables</title>
      <content>
        <para>
          You can substititute user control variables with the <literal>[VARIABLE]</literal> syntax, eg. <literal>[MYDIR]</literal>.
          For more information on user controls see <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="3c0e993b-cfec-4f08-a55d-314226c51d38" />.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>