<?xml version="1.0" encoding="utf-8"?>
<topic id="9cd31590-c899-40a7-897a-d5ca844c2324" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        You can use the <newTerm>InstalledCheck</newTerm> configuration element to check whether a component is already installed.
        For example, you can check if .NET Framework 1.1 is installed by reading this registry key
        <fictitiousUri>SOFTWARE\Microsoft\NET Framework Setup\NDP\v1.1.4322\Install</fictitiousUri>.
        InstalledChecks can be combined with <newTerm>operating system checks</newTerm> which filter components depending on the target OS and
        with <newTerm>processor architecture checks</newTerm> which check the operating system or hardware architecture.
      </para>
    </introduction>
    <section address="checkstypes">
      <title>Installed Check Types</title>
      <content>
        <para>
          There are four types of installed checks: <newTerm>check_file</newTerm>, <newTerm>check_directory</newTerm>, 
          <newTerm>check_registry_value</newTerm> and <newTerm>check_product</newTerm>. These can also be combined 
          with installed check operators.
        </para>
      </content>
      <sections>
        <section address="checktypesfile">
          <title>check_file</title>
          <content>
            <para>
              Check for a specific file with a specific version.
            </para>
            <para>
              The following comparison types are available.
              <definitionTable>
                <definedTerm>match</definedTerm>
                <definition>Check that the version of the file exactly matches the check value.</definition>
                <definedTerm>exists</definedTerm>
                <definition>Check whether the file exists.</definition>
                <definedTerm>version</definedTerm>
                <definition>Check whether the version of the file is greater or equal to the check value.</definition>
                <definedTerm>version_eq</definedTerm>
                <definition>Check whether the version of the file is equal to the check value.</definition>
                <definedTerm>version_lt</definedTerm>
                <definition>Check whether the version of the file is lesser than the check value.</definition>
                <definedTerm>version_le</definedTerm>
                <definition>Check whether the version of the file is lesser or equal than the check value.</definition>
                <definedTerm>version_gt</definedTerm>
                <definition>Check whether the version of the file is greater than the check value.</definition>
                <definedTerm>version_ge</definedTerm>
                <definition>Check whether the version of the file is greater or equal than the check value.</definition>
              </definitionTable>
            </para>
          </content>
        </section>
        <section address="checktypesdirectory">
          <title>check_directory</title>
          <content>
            <para>
              Check whether a specific directory exists.
            </para>
          </content>
        </section>
        <section address="checktypesregistry">
          <title>check_registry_value</title>
          <content>
            <para>
              Check for a specific registry key or value.
              <alert class="note">
                <para>
                  Only the DWORD, REG_SZ and REG_MULTI_SZ registry types are currently supported.
                </para>
              </alert>
            </para>
            <para>
              The following comparison types are available.
              <definitionTable>
                <definedTerm>match</definedTerm>
                <definition>
                  Check that the value of the registry key exactly matches the check value.
                  For REG_MULTI_SZ registry values, specify a comma-separated values.
                  The registry value must match exactly the specified list.
                </definition>
                <definedTerm>exists</definedTerm>
                <definition>Check whether the registry key or value exists.</definition>
                <definedTerm>contains</definedTerm>
                <definition>
                  Check whether the registry value contains the check value.
                  For REG_MULTI_SZ registry values, specify a comma-separated list.
                  The registry value must contain all the specified values.
                </definition>
                <definedTerm>version</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version is
                  greater or equal to the check value. This option is not available for REG_MULTI_SZ
                  values.
                </definition>
                <definedTerm>version_eq</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version in registry is
                  equal to the check value.
                </definition>
                <definedTerm>version_lt</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version in registry is
                  lesser than the check value.
                </definition>
                <definedTerm>version_le</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version in registry is
                  lesser or equal than the check value.
                </definition>
                <definedTerm>version_gt</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version in registry is
                  greater than the check value.
                </definition>
                <definedTerm>version_ge</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version in registry is
                  greater or equal than the check value.
                </definition>
              </definitionTable>
            </para>
          </content>
        </section>
        <section address="checktypesproduct">
          <title>check_product</title>
          <content>
            <para>
              Query the MSI database for a given product by product id or upgrade code. The following properties are availble
              in the check.
              <definitionTable>
                <definedTerm>description</definedTerm>
                <definition>A free-formed description of the check, appears in the logs.</definition>
                <definedTerm>id</definedTerm>
                <definition>
                  A product code or upgrade code. A product code identifies a specific version of a product, while an upgrade code
                  never changes and connects multiple product versions together. Note that it is possible to have multiple products
                  relate via an upgrade code. See MSDN
                  <externalLink>
                    <linkText>ProductCode</linkText>
                    <linkUri>http://msdn.microsoft.com/en-us/library/aa370855(VS.85).aspx</linkUri>
                  </externalLink>
                  and
                  <externalLink>
                    <linkText>UpgradeCode</linkText>
                    <linkUri>http://msdn.microsoft.com/en-us/library/aa372375(VS.85).aspx</linkUri>
                  </externalLink>
                  for more information.
                </definition>
                <definedTerm>propertyname</definedTerm>
                <definition>
                  The name of the property to retrieve and use for comparison from the installed product once it
                  has been located by product or upgrade code.
                </definition>
                <definedTerm>propertyvalue</definedTerm>
                <definition>The comparison value.</definition>
              </definitionTable>
            </para>
            <para>
              The following comparison types can be made.
              <definitionTable>
                <definedTerm>exists</definedTerm>
                <definition>Check that the product identified by its ProductCode or UpgradeCode exists.</definition>
                <definedTerm>match</definedTerm>
                <definition>
                  Check that <code>propertyvalue</code> matches exactly the property value
                  retrieved from the installed product. If multiple products are found, match all.
                </definition>
                <definedTerm>version</definedTerm>
                <definition>Check whether the version of the installed product(s) is greater or equal to the check value.</definition>
                <definedTerm>version_eq</definedTerm>
                <definition>Check whether the version of the installed product(s) is equal to the check value.</definition>
                <definedTerm>version_lt</definedTerm>
                <definition>Check whether the version of the installed product(s) is lesser than the check value.</definition>
                <definedTerm>version_le</definedTerm>
                <definition>Check whether the version of the installed product(s) is lesser or equal than the check value.</definition>
                <definedTerm>version_gt</definedTerm>
                <definition>Check whether the version of the installed product(s) is greater than the check value.</definition>
                <definedTerm>version_ge</definedTerm>
                <definition>Check whether the version of the installed product(s) is greater or equal than the check value.</definition>
              </definitionTable>
            </para>
          </content>
        </section>
      </sections>
    </section>
    <section address="checkoperators">
      <title>Check Operators</title>
      <content>
        <para>
          You can combine results from multiple InstalledCheck elements with an <newTerm>InstalledCheckOperator</newTerm>.
          The following operators are supported: <newTerm>And</newTerm>, <newTerm>Or</newTerm> and <newTerm>Not</newTerm>.
          <alert class="important">
            <para>
              Remember that the check tests whether the component is <legacyBold>installed</legacyBold> and a component appears
              in the boostrapper at setup time only if it is <legacyBold>not installed</legacyBold>. When combining component operators
              this behavior may require some mental gymnastics.
            </para>
          </alert>
        </para>
      </content>
    </section>
    <section address="operatingsystemfilters">
      <title>Operating System Filters</title>
      <content>
        <para>
          A component may not be required for a specific operating system or may be required for a specific operating system only.
          These behaviors can be achieved with <newTerm>OS filters</newTerm>, specifically <literal>os_filter_greater</literal>
          and <literal>os_filter_smaller</literal>.
        </para>
        <para>
          The following operating system table values can be used for <literal>os_filter_greater</literal>
          and <literal>os_filter_smaller</literal>.
          <table>
            <title>Operating System Values</title>
            <tableHeader>
              <row>
                <entry>OS Name</entry>
                <entry>Enumerator</entry>
                <entry>Numeric Identifier</entry>
              </row>
            </tableHeader>
            <row>
              <entry>Not Valid</entry>
              <entry>winNotValid</entry>
              <entry>0</entry>
            </row>
            <row>
              <entry>Not Valid</entry>
              <entry>winNotValid</entry>
              <entry>0</entry>
            </row>
            <row>
              <entry>Windows 95</entry>
              <entry>win95</entry>
              <entry>5</entry>
            </row>
            <row>
              <entry>Windows 95 OSR2</entry>
              <entry>win95osr2</entry>
              <entry>10</entry>
            </row>
            <row>
              <entry>Windows 98</entry>
              <entry>win98</entry>
              <entry>15</entry>
            </row>
            <row>
              <entry>Windows 98 Second Edition</entry>
              <entry>win98se</entry>
              <entry>20</entry>
            </row>
            <row>
              <entry>Windows Millennium</entry>
              <entry>winME</entry>
              <entry>25</entry>
            </row>
            <row>
              <entry>Windows NT4</entry>
              <entry>winNT4</entry>
              <entry>30</entry>
            </row>
            <row>
              <entry>Windows NT4 Service Pack 6</entry>
              <entry>winNT4sp6</entry>
              <entry>35</entry>
            </row>
            <row>
              <entry>Windows NT4 Service Pack 6a</entry>
              <entry>winNT4sp6a</entry>
              <entry>40</entry>
            </row>
            <row>
              <entry>Windows 2000</entry>
              <entry>win2000</entry>
              <entry>45</entry>
            </row>
            <row>
              <entry>Windows 2000 Service Pack 1</entry>
              <entry>win2000sp1</entry>
              <entry>50</entry>
            </row>
            <row>
              <entry>Windows 2000 Service Pack 2</entry>
              <entry>win2000sp2</entry>
              <entry>55</entry>
            </row>
            <row>
              <entry>Windows 2000 Service Pack 3</entry>
              <entry>win2000sp3</entry>
              <entry>60</entry>
            </row>
            <row>
              <entry>Windows 2000 Service Pack 4</entry>
              <entry>win2000sp4</entry>
              <entry>65</entry>
            </row>
            <row>
              <entry>Windows XP</entry>
              <entry>winXP</entry>
              <entry>75</entry>
            </row>
            <row>
              <entry>Windows XP Service Pack 1</entry>
              <entry>winXPsp1</entry>
              <entry>80</entry>
            </row>
            <row>
              <entry>Windows XP Service Pack 2</entry>
              <entry>winXPsp2</entry>
              <entry>82</entry>
            </row>
            <row>
              <entry>Windows XP Service Pack 3</entry>
              <entry>winXPsp3</entry>
              <entry>84</entry>
            </row>
            <row>
              <entry>Windows Server 2003</entry>
              <entry>winServer2003</entry>
              <entry>90</entry>
            </row>
            <row>
              <entry>Windows Server 2003 R2</entry>
              <entry>winServer2003R2</entry>
              <entry>91</entry>
            </row>
            <row>
              <entry>Windows Server 2003 Service Pack 1</entry>
              <entry>winServer2003sp1</entry>
              <entry>92</entry>
            </row>
            <row>
              <entry>Windows Server 2003 R2 Service Pack 1</entry>
              <entry>winServer2003R2sp1</entry>
              <entry>93</entry>
            </row>
            <row>
              <entry>Windows Server 2003 Service Pack 2</entry>
              <entry>winServer2003sp2</entry>
              <entry>94</entry>
            </row>
            <row>
              <entry>Windows Server 2003 R2 Service Pack 2</entry>
              <entry>winServer2003R2sp2</entry>
              <entry>95</entry>
            </row>
            <row>
              <entry>Windows Vista</entry>
              <entry>winVista</entry>
              <entry>100</entry>
            </row>
            <row>
              <entry>Windows Vista Service Pack 1</entry>
              <entry>winVistaSp1</entry>
              <entry>102</entry>
            </row>
            <row>
              <entry>Windows Vista Service Pack 2</entry>
              <entry>winVistaSp2</entry>
              <entry>103</entry>
            </row>
            <row>
              <entry>Windows Server 2008</entry>
              <entry>winServer2008</entry>
              <entry>110</entry>
            </row>
            <row>
              <entry>Windows Server 2008 R2</entry>
              <entry>winServer2008R2</entry>
              <entry>111</entry>
            </row>
            <row>
              <entry>Windows 7</entry>
              <entry>win7</entry>
              <entry>120</entry>
            </row>
          </table>
        </para>
      </content>
    </section>
    <section address="processorarchitecturefilters">
      <title>Processor Architecture Filters</title>
      <content>
        <para>
          dotNetInstaller supports various processor architecture filters. You can list those processors on which the entire bootstrapper,
          configuration or component can be installed. Separate the processor architectures by commas and use the ! (not) operator
          where appropriate.
        </para>
        <alert class="note">
          <para>
            Note that dotNetInstaller always runs in 32-bit mode, specifically compatibility 32-bit mode on 64-bit operating
            systems. This doesn't affect its general operating system filter behavior.
          </para>
        </alert>
        <para>
          The following processor architectures are supported.
          <definitionTable>
            <definedTerm>x86</definedTerm>
            <definition>Windows 32-bit.</definition>
            <definedTerm>x64</definedTerm>
            <definition>Windows 64-bit.</definition>
            <definedTerm>mips</definedTerm>
            <definition></definition>
            <definedTerm>alpha</definedTerm>
            <definition></definition>
            <definedTerm>ppc</definedTerm>
            <definition></definition>
            <definedTerm>shx</definedTerm>
            <definition></definition>
            <definedTerm>arm</definedTerm>
            <definition></definition>
            <definedTerm>ia64</definedTerm>
            <definition></definition>
            <definedTerm>alpha64</definedTerm>
            <definition></definition>
            <definedTerm>msil</definedTerm>
            <definition></definition>
            <definedTerm>ia32onwin64</definedTerm>
            <definition></definition>
          </definitionTable>
        </para>
      </content>
    </section>
    <section address="evaluatingchecks">
      <title>Evaluating Checks</title>
      <content>
        <para>
          Checks are evaluated when the bootstrapper starts. Component checks are not evaluated after a successful or a
          failed installation of a component unless the user is returned to the bootstrapper. For example,
          if a component fails the user may be prompted to continue or to abort the operation. If he chooses to abort,
          he is returned to the bootstrapper and the components list is reevaluated. If he chooses to continue, the components
          list is not reevaluated and the next component is installed. Note that the latter behavior may be changed with
          options.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>