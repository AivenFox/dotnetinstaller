<?xml version="1.0" encoding="utf-8"?>
<topic id="3c0e993b-cfec-4f08-a55d-314226c51d38" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        It's possible to add user-defined controls that can generate values to the
        setup bootstrapper.
      </para>
    </introduction>
    <section address="dotnetinstallerlayoutusercontrols">
      <title>User-Defined Controls</title>
      <content>
        <para>
          The following example from the <fictitiousUri>CustomInputSample</fictitiousUri> adds a browse and a checkbox control.
          <mediaLink>
            <image xlink:href="DotNetInstallerUserControls.jpg" />
          </mediaLink>
        </para>
        <para>
          The following controls are available in the editor.
          <definitionTable>
            <definedTerm>label</definedTerm>
            <definition>A static text label.</definition>
            <definedTerm>hyperlink</definedTerm>
            <definition>A static link to an internet address or a file.</definition>
            <definedTerm>edit</definedTerm>
            <definition>A text box.</definition>
            <definedTerm>checkbox</definedTerm>
            <definition>A checkbox with a user-defined checked and unchecked value.</definition>
            <definedTerm>browse</definedTerm>
            <definition>A file or directory locator.</definition>
            <definedTerm>license</definedTerm>
            <definition>A license agremeent.</definition>
            <definedTerm>image</definedTerm>
            <definition>A user-defined image.</definition>
          </definitionTable>
        </para>
      </content>
    </section>
    <section address="usercontrollicenseagreement">
      <title>License Agreement</title>
      <content>
        <para>
          You can specify a custom license agreement that must be accepted for an installation to proceed.
          <mediaLink>
            <image xlink:href="DotNetInstallerLicenseAgreement.jpg" />
          </mediaLink>
          License agreement is implemented as a user control with the following additional parameters.
          <tableDefinition>
            <definedTerm>Text</definedTerm>
            <definition>Text of the license link to display.</definition>
            <definedTerm>Accepted</definedTerm>
            <definition>Default state of license agreement checkbox.</definition>
            <definedTerm>AcceptMessage</definedTerm>
            <definition>Message to display when a user attempts to install without accepting a license agreement.</definition>
            <definedTerm>LicenseFile</definedTerm>
            <definition>
              A license file to display when the user clicks the license agreement text. This file
              is extracted at runtime into the session's temporary directory.
            </definition>
            <definedTerm>ResourceId</definedTerm>
            <definition>Resource id for embedding the contents of the license file.</definition>
          </tableDefinition>
          Accepting a license agreement in basic and silent UI modes is not required.
        </para>
      </content>
    </section>
    <section address="conditionalenabledisablecontrolvalues">
      <title>Conditionally Disabling User-Defined Controls</title>
      <content>
        <para>
          You can use <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="13ba8ef4-383f-4dd4-9588-b4ace3fcbf12" />
          to conditionally enable or disable controls. You can control whether the installed check applies to the 
          <literal>enabled</literal>, <literal>display</literal> or both properties of the controls. Unlike installed checks for
          components, installed checks for controls are not inverted, ie. the installed check must evaluate to <literal>true</literal>
          for the control to be enabled or for the control to display.
        </para>
      </content>
    </section>
    <section address="referencingusercontrolvalues">
      <title>Referencing User-Defined Control Values</title>
      <content>
        <para>
          You can reference user-defined control values in <literal>command</literal>, <literal>msi</literal>, <literal>msu</literal>
          and <literal>openfile</literal> component commands and command line parameters. Controls that accept user input
          (<literal>edit</literal>, <literal>checkbox</literal>, <literal>browse</literal> and <literal>license</literal>) require
          a unique <literal>id</literal> set in the editor that must be referenced in square brackets. For example, the value of
          the <literal>browse</literal> control with id <literal>MYDIR</literal> can be used by entering <literal>[MYDIR]</literal>.
        </para>
        <para>
          Enabled controls always have a value. Disabled controls only have a value when <literal>has_value_disabled</literal> is
          set to <literal>True</literal>. Hidden controls never have a value.
        </para>
      </content>
    </section>
    <section address="overridingcontrolvalues">
      <title>Overriding User-Defined Control Values</title>
      <content>
        You can override the user-defined control values from the command line with the <literal>/controlArgs</literal>
        command-line option.
        <code language="cmd">
          <![CDATA[dotNetInstaller.exe /configFile Samples\CustomInputSetup\Configuration.xml /controlArgs EXITCODE:5]]>
        </code>
      </content>
    </section>
  </developerConceptualDocument>
</topic>